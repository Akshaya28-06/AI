from collections import deque
def is_goal(state, target):
    return state[0] == target or state[1] == target
def get_successors(state, jug1_capacity, jug2_capacity):
    x, y = state
    successors = set()
    successors.add((jug1_capacity, y))
    successors.add((x, jug2_capacity))
    successors.add((0, y))
    successors.add((x, 0))
    pour = min(x, jug2_capacity - y)
    successors.add((x - pour, y + pour))
    pour = min(y, jug1_capacity - x)
    successors.add((x + pour, y - pour))
    return successors
def bfs(jug1_capacity, jug2_capacity, target):
    visited = set()
    queue = deque()
    parent = {}
    start = (0, 0)
    queue.append(start)
    visited.add(start)
    parent[start] = None
    while queue:
        state = queue.popleft()
        if is_goal(state, target):
            path = []
            while state:
                path.append(state)
                state = parent[state]
            path.reverse()
            return path
        for neighbor in get_successors(state, jug1_capacity, jug2_capacity):
            if neighbor not in visited:
                visited.add(neighbor)
                parent[neighbor] = state
                queue.append(neighbor)
    return None
jug1_capacity = 4
jug2_capacity = 3
target = 2
solution = bfs(jug1_capacity, jug2_capacity, target)
if solution:
    print("Steps to reach target:")
    for step in solution:
        print(f"Jug1: {step[0]}L, Jug2: {step[1]}L")
else:
    print("No solution found.")

//output
Steps to reach target:
Jug1: 0L, Jug2: 0L
Jug1: 0L, Jug2: 3L
Jug1: 3L, Jug2: 0L
Jug1: 3L, Jug2: 3L
Jug1: 4L, Jug2: 2L
